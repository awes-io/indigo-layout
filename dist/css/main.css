:root {
  --ui-color: #fff;
  --ui-background: #fff;
  --ui-background-secondary: #f8f8f8;
  --ui-overlay: rgba(0,0,0,0.5);
  --nav-color: var(--ui-color);
  --nav-background: linear-gradient(to bottom, #393a6f 0%, #4e396f 100%);
  --btn-color: var(--ui-color);
  --btn-background: #6abf5f;
  --link-color: #45a4dc;
  --link-color-hover: #2d98d7;
}
*,
::before,
::after {
  background-repeat: no-repeat;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
body {
  margin: 0;
  color: var(--base-color);
}
button {
  padding: 0;
  margin: 0;
  border: none;
  background: none;
  color: inherit;
  font: inherit;
}
.body-overflow-hidden {
  overflow: hidden;
}
.awes-app a {
  color: var(--link-color);
  text-decoration: none;
  -webkit-transition: color 300ms ease;
  -moz-transition: color 300ms ease;
  -o-transition: color 300ms ease;
  -ms-transition: color 300ms ease;
  transition: color 300ms ease;
}
.awes-app a:hover,
.awes-app a:focus {
  color: var(--link-color-hover);
}
.awes-app a:hover {
  text-decoration: underline;
}
.awes-app modal-window,
.awes-app notifications,
.awes-app slide-up-down {
  display: none;
}
body {
  font-family: 'Lato', system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, sans-serif;
  font-size: 14px;
  line-height: 1.2;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}
p {
  margin: 16.8px 0;
}
h1:first-child,
h2:first-child,
h3:first-child,
h4:first-child,
h5:first-child,
h6:first-child,
.h1:first-child,
.h2:first-child,
.h3:first-child,
.h4:first-child,
.h5:first-child,
.h6:first-child {
  margin-top: 0;
}
h1,
.h1 {
  font-size: 24px;
  font-weight: 700;
  margin: 1.4em 0 0.9em;
}
h2,
.h1 {
  font-size: 24px;
  font-weight: 400;
  margin: 1.05em 0 0.9em;
}
h3,
.h1 {
  font-size: 18px;
  font-weight: 700;
  margin: 1.4em 0 1.133em;
}
h4,
.h1 {
  font-size: 18px;
  font-weight: 400;
  margin: 1.4em 0 1.133em;
}
h5,
.h1 {
  font-size: 16px;
  font-weight: 400;
  margin: 1.575em 0 1.425em;
}
h6,
.h1 {
  font-size: 14px;
  font-weight: 400;
  margin: 1.2em 0;
}
.btn {
  color: var(--btn-color);
  background: var(--btn-background);
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-box;
  display: inline-flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  border-radius: 2px;
  padding: 15px 30px;
  min-width: 120px;
  text-transform: uppercase;
  font-size: 10px;
  line-height: 1.2;
}
frame-wrapper {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  min-height: 100vh;
}
frame-nav {
  background: var(--nav-background);
  color: var(--nav-color);
  width: 260px;
  min-height: 100vh;
  padding-top: 110px;
  position: relative;
}
frame-nav:before {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  width: 100%;
  background-color: rgba(0,0,0,0.3);
  content: attr(title);
  position: absolute;
  top: 0;
  left: 0;
  min-height: 110px;
  font-size: 24px;
  font-weight: 700;
}
frame-nav-item {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  width: 100%;
  height: 60px;
  padding: 0 10%;
}
frame-nav-item:before {
  content: '';
  display: block;
  height: 1.5em;
  width: 1.5em;
  background-color: currentColor;
  opacity: 0.2;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
  filter: alpha(opacity=20);
  border-radius: 50%;
  margin-right: 10%;
}
frame-nav-item:after {
  display: block;
  height: 1em;
  width: 80%;
  content: attr(title);
}
frame-nav-item ul {
  display: none;
}
.frame {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  min-height: 100vh;
}
.frame__aside {
  background: var(--nav-background);
  width: 260px;
  min-height: 100vh;
  color: var(--nav-color);
  -webkit-flex-shrink: 0;
  flex-shrink: 0;
  z-index: 100;
  position: relative;
}
.frame__aside-nav,
.frame__aside-nav ul {
  margin: 0;
  padding: 0;
}
.frame__nav-item {
  position: relative;
}
.frame__nav-item a,
.frame__nav-item button {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  width: 100%;
  color: inherit;
  opacity: 0.4;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
  filter: alpha(opacity=40);
  -webkit-transition: opacity 300ms ease;
  -moz-transition: opacity 300ms ease;
  -o-transition: opacity 300ms ease;
  -ms-transition: opacity 300ms ease;
  transition: opacity 300ms ease;
  padding: 10px 30px;
}
.frame__nav-item a:hover,
.frame__nav-item button:hover,
.frame__nav-item a:focus,
.frame__nav-item button:focus {
  text-decoration: none;
  color: inherit;
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
.frame__nav-item > a,
.frame__nav-item > button {
  min-height: 60px;
}
.frame__nav-item ul > li > a {
  padding-left: 50px;
}
.frame__nav-item.has-submenu {
  padding-right: 50px;
}
.frame__nav-item.has-submenu:before {
  content: '';
  display: block;
  border-bottom: 1px solid currentColor;
  border-left: 1px solid currentColor;
  width: 0.5em;
  height: 0.5em;
  position: absolute;
  right: 25px;
  top: 30px;
  -webkit-transform: translate(50%, -50%) rotate(-45deg);
  -moz-transform: translate(50%, -50%) rotate(-45deg);
  -o-transform: translate(50%, -50%) rotate(-45deg);
  -ms-transform: translate(50%, -50%) rotate(-45deg);
  transform: translate(50%, -50%) rotate(-45deg);
  -webkit-transition: -webkit-transform 300ms ease;
  -moz-transition: -moz-transform 300ms ease;
  -o-transition: -o-transform 300ms ease;
  -ms-transition: -ms-transform 300ms ease;
  transition: transform 300ms ease;
}
.frame__nav-item.has-submenu.is-opened:before {
  -webkit-transform: translate(50%, -50%) rotate(-225deg);
  -moz-transform: translate(50%, -50%) rotate(-225deg);
  -o-transform: translate(50%, -50%) rotate(-225deg);
  -ms-transform: translate(50%, -50%) rotate(-225deg);
  transform: translate(50%, -50%) rotate(-225deg);
}
.frame__aside-top {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  text-align: center;
  padding: 20px;
  background-color: rgba(0,0,0,0.3);
  min-height: 110px;
  font-size: 24px;
  font-weight: 700;
}
.frame__right {
  background: var(--ui-background-secondary);
  width: calc(100% - 260px);
  position: relative;
}
.frame__header {
  background: var(--ui-background);
  min-height: 110px;
  position: relative;
}
.frame__content {
  padding: 30px 40px;
}
.modal {
  z-index: 100;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding: 20px;
  overflow: auto;
  background-color: var(--ui-modalcolor);
}
.modal .modal__dialog {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  max-width: 600px;
  width: 100%;
  padding: 20px;
  margin: auto;
  position: relative;
  background-color: var(--ui-bgcolor);
}
.modal .modal__header {
  position: relative;
  padding-right: 50px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.modal .modal__close {
  position: absolute;
  right: 0;
  top: 0;
}
.modal_fullscreen {
  overflow: hidden;
}
.modal_fullscreen .modal__dialog {
  position: fixed;
  top: 0;
  left: 0;
  max-width: 100%;
  width: 100%;
  height: 100%;
  overflow: auto;
}
.modal_fullscreen .modal__content {
  padding: 0 20px 20px 20px;
}
.modal_fullscreen .modal__header {
  width: 100%;
  padding: 0 50px 0 20px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
